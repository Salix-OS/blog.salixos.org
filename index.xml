<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Salix Blog</title>
    <link>https://blog.salixos.org/</link>
    <description>Recent content on The Salix Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 05 Jul 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://blog.salixos.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>On Display Managers</title>
      <link>https://blog.salixos.org/post/on-display-managers/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/on-display-managers/</guid>
      <description>&lt;p&gt;A Display Manager is the application that provides a graphic user
interface (GUI) that is displayed at the end of the boot process and
lets the user authenticate themselves by providing their username and
password, before entering their preferred X11 session, for example
Xfce, KDE, fluxbox, etc.&lt;/p&gt;

&lt;p&gt;Up until Salix 14.2, we&amp;rsquo;ve been using a very old version of GDM as the
default display manager. Actually we&amp;rsquo;ve been using the same major
version of GDM, which is 2.20.x since the first release of Salix, 10
years ago! The version that we have been using since 2010, is 2.20.11,
which is the last release in that branch.  Thankfully, it doesn&amp;rsquo;t
seem to have any major bugs. But still, hanging on to a very old
and unmaintained release such as this, obviously has its problems.&lt;/p&gt;

&lt;p&gt;So why don&amp;rsquo;t we just use a newer version of GDM? Well, since GDM 2.22,
the Gnome devs decided to integrate it further with their entire
desktop, so it depends on gnome-panel. The gnome-panel package in turn,
requires almost all of Gnome as dependencies. Essentially, what they
did, is that the tied GDM to Gnome. So, even if you want to use it to
launch Xfce, you&amp;rsquo;ll need to have most of Gnome installed. That simply
won&amp;rsquo;t work for Salix. To add to that, even newer versions of GDM, also
require PAM and Systemd. While there is no other reason to do it, we
could possibly include PAM, but Systemd is completely out of the
question. So, newer versions of GDM are definitely out.&lt;/p&gt;

&lt;p&gt;What about other display managers then?&lt;/p&gt;

&lt;p&gt;The LinuxMint folks have decided to fork an old version of GDM and
create MDM, which stands for MDM Display Manager. I tried to package it
for Salix and test it, but there were a lot of compilation errors. I
started fixing them one by one and the build process continued. But then
I realized that MDM depends on webkit for some reason. They seem to have replaced
the renderer with one based on webkit, probably borrowing code from
newer versions of GDM.
Plus, it seems that MDM is not even used by LinuxMint anymore, I think
they probably switched to LightDM, along with almost every other Ubuntu
derivative. So, no reason to switch from one unmaintained display
manager that still works OK, to another unmaintained display manager,
that we haven&amp;rsquo;t tested and needs extra dependencies.&lt;/p&gt;

&lt;p&gt;So, why not just use LightDM then? It seems to be the choice by lots of
distributions out there after all. To be honest, I haven&amp;rsquo;t tried it, but
I know it needs PAM. There&amp;rsquo;s no way around it, so if we want to switch
to it, we must adopt PAM. The problem is that PAM introduces a ton of
complexity, that is not at all needed by a desktop distribution and
that&amp;rsquo;s probably the reason why Slackware hasn&amp;rsquo;t included it yet either.
I really want to avoid having to include PAM if we don&amp;rsquo;t really really
really have to.&lt;/p&gt;

&lt;p&gt;What other choices are out there? There is of course LXDM, the display
manager
provided by the LXDE project. We can make this work for Salix. It has
actually been updated to use GTK+3, so that&amp;rsquo;s some progress. But still,
the latest available release is from 2015. It seems that this one isn&amp;rsquo;t
actually maintained by its developers anymore. Distributions offer some
patches that fix some issues that the latest released version has, but
I&amp;rsquo;m not sure we can depend on accumulating patches for such a crucial
piece of software. Additionally, while it does work, it is not as
feature-rich as our old version of GDM is. There is no GUI configuration
app and honestly, I don&amp;rsquo;t find it as good looking as our old GDM is. So,
if we were to swap our old GDM with LXDM, we would switch to an inferior
option.&lt;/p&gt;

&lt;p&gt;Then of course there is Slim. This could work too, but is even more
spartan than LXDM, there is also no GUI configuration app for it. What&amp;rsquo;s
more, it hasn&amp;rsquo;t had a commit to its codebase since 2013.&lt;/p&gt;

&lt;p&gt;XDM is the standard X11 tool for the job. But apart from offering a
dialog for the user to input his credentials, it offers no other
functionality. Plus, it&amp;rsquo;s ugly. Admittedly, some Slackware users
have been doing some
&lt;a href=&#34;https://www.linuxquestions.org/questions/slackware-14/%5Bann%5D-xdm-slackware-theme-2019-0628-a-4175656722/&#34;&gt;interesting things with it&lt;/a&gt;.
But still, although impressive, this is nothing more than a (nicely done) hack.
There is still no GUI configuration tool, and even localization would
probably be impossible. I can see this being a nice choice for a
personal setup, but not as the default DM for a distribution.&lt;/p&gt;

&lt;p&gt;WDM is another long unmaintained display manager, that is a fork of a
much earlier XDM release. It is written using the WINGs toolkit, so it
would look a little out of place in Salix.  Well, not if we had a
WindowMaker release :P. Still, I took a brief look into its code,
because the GUI part is detached from the rest of the
program, I was thinking that maybe I could replace the WINGs
login window with a GTK+3 one and keep the rest of the app
as is. Unfortunately, WDM does not support any kind of
dynamic discovery of desktop environments or window manager
sessions using the standard .desktop files. What it does, is
that it has hardcoded some of them in the code. This is not
really an option if you want to be able to launch a desktop environment
or a window manager that the WDM developers weren&amp;rsquo;t aware of. Adding
that functionality myself would be more than I bargained for. Oh, did I
mention that it has been completely unmaintained for almost 10
years now?&lt;/p&gt;

&lt;p&gt;KDM, from the KDE project, is one that was used as the default display
manager in Slackware for ages. It has now been superseded by SSDM.
However, SSDM, as KDM before it, requires Qt and I wouldn&amp;rsquo;t want to add
this huge dependency on a default installation. The qt5 package in 14.2
is about 55MB. That&amp;rsquo;s too much additional space for a distribution that
doesn&amp;rsquo;t include any other Qt applications by default.&lt;/p&gt;

&lt;p&gt;So where does all this leave us? I&amp;rsquo;m not sure. We seem to be out of
options for the next release, whenever that will be. Anything we choose
to replace the old GDM package, will be in one way or another, inferior.
The thought of forking the old GDM and assuming its maintainance has
crossed my mind, but I don&amp;rsquo;t think I have the time to do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spam in the Forums</title>
      <link>https://blog.salixos.org/post/spam-in-the-forums/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/spam-in-the-forums/</guid>
      <description>&lt;p&gt;Unfortunately, we&amp;rsquo;re having a huge problem with spammers in our forums.
Most of the users that register are actually spammers. This has been
going on for a while too.&lt;/p&gt;

&lt;p&gt;About a year ago (or maybe more than that? I&amp;rsquo;m not sure), we moved to
using Google&amp;rsquo;s &amp;ldquo;I am not a robot&amp;rdquo; checkbox reCAPTCHA. This is supposed
to be the best countermeasure against bots. Before doing that, spammers
were also a big problem. After moving to the new reCAPTCHA, things
improved noticeably. But lately, as it seems, spammers have pulled some
tricks and have been able to register successfully with the forums
anyway. I&amp;rsquo;m inclined to believe that the ones that are registering are
not bots, but actual people that are being paid to do exactly that and
then maybe hand the account over to a bot that will post the spam.&lt;/p&gt;

&lt;p&gt;By the way, the posts that spammers make are getting harder to tell
apart from legitimate posts. Some are very easy to spot, as they
blatantly post links to what they want to advertise (for some reason,
usually that is shoes). But most of the times, what they do, is quite
advanced; they go through older, legitimate posts, copy some, or all of
the text in them, and use that to create a new post. Most of the times,
it looks like a perfectly legitimate post and there is no way to tell
that it&amp;rsquo;s actually spam.&lt;/p&gt;

&lt;p&gt;You might ask, why do they do that and what do they want to achieve?
Well, what they used to do, was that they could later edit that post
with their spam links. At some point, we disabled post editing after
some time, so they weren&amp;rsquo;t able to do that. What they started doing
though, was that they didn&amp;rsquo;t touch their earlier, seemingly legitimate,
posts at all, but instead edited their signature to include their spam
links. And since nobody goes back a month to check for edits in old
posts or signatures, that edit went mostly unnoticed.&lt;/p&gt;

&lt;p&gt;These, seemingly legitimate posts, are very hard to identify as
spammers. The first time I noticed is because I remembered that I had
replied to a very similar post in the past. I did a forum search in
order to just provide a link to it as an answer, but what I found was
that this older post had identical text! So, after that, for every newly
registered user that made a seemingly legitimate post, I searched the
forum for similar posts. That was indeed a good way to identify them.
Some of those bots are even more advanced, instead of searching through
the forum to copy text for their posts, they search through the
Internet! Most of the times they use similar forums as source, so the
posts seem legitimate, but are harder to identify. In most cases, these
posts received replies, from users that couldn&amp;rsquo;t identify them as
spammers. Sometimes the questions were awkward, like &amp;ldquo;How do I install
Firefox?&amp;ldquo;, when Firefox comes preinstalled in Salix, or completely
irrelevant to the forum, like questions about Windows.&lt;/p&gt;

&lt;p&gt;Trying to fight that is hard and requires commitment and time. And it
drains energy away from development work, that has to be done. A huge
thanks goes to our loyal users though, who are reporting obviously spam
or &amp;ldquo;weird&amp;rdquo; posts as soon as they see them.&lt;/p&gt;

&lt;p&gt;So, we&amp;rsquo;ve changed our user registration policy in order to help with all
that mess. Newly registered users, will need to have their first two
posts approved by a moderator, before they become public. Also, until
they have published at least two posts, they don&amp;rsquo;t have the permissions
to edit their profile information, so they are not able to edit their
signatures. We understand that this might pose a slight inconvenience
for legitimate users, but we&amp;rsquo;ll try our best to approve posts as soon as
we can. We encourage new users to make a new post on our
&lt;a href=&#34;https://forum.salixos.org/viewforum.php?f=12&#34;&gt;Salix pub forum section&lt;/a&gt;
to introduce themselves. You don&amp;rsquo;t have to think of anything profound to
write, just say hi! That way you&amp;rsquo;ll be able to increase your
post count and when the time comes that you actual have a problem, you&amp;rsquo;ll
be able to post instantly.&lt;/p&gt;

&lt;p&gt;For some reason, since we implemented these changes, no spammers have
registered in the forums! I would have expected that they register as
usual, but be unable to post anything. Let&amp;rsquo;s see how it goes&amp;hellip;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m hoping these changes will drive away spammers from our forums and
all users will have a better experience.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New blog site</title>
      <link>https://blog.salixos.org/post/new-blog/</link>
      <pubDate>Sun, 21 Oct 2018 22:50:02 +0300</pubDate>
      
      <guid>https://blog.salixos.org/post/new-blog/</guid>
      <description>&lt;p&gt;I wanted to do this for a long time. The old blog site at blogspot was
always supposed to be something temporary. It lasted five years&amp;hellip;&lt;/p&gt;

&lt;p&gt;I never really liked the look of the old blog site that much. And there
weren&amp;rsquo;t that many options to customize it in the first place. The
WYSIWYG editor was ugly and difficult to work with. And it was hard to
prepare content and post it later. I could create new posts in HTML
though and that&amp;rsquo;s how I ended up creating all previous posts. I would
first write the post in &lt;a href=&#34;https://txt2tags.org/&#34;&gt;txt2tags&lt;/a&gt; markup,
convert that to HTML and create a new post with that. But then, editing
existing content was cumbersome too.&lt;/p&gt;

&lt;p&gt;On the other hand, I always liked static site generators. I&amp;rsquo;ve used them
on several occasions too. I started up with
&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, which has an astonishing number of
features, but it was a burden to install in
Salix. There are lots of different Ruby dependencies involved and I
didn&amp;rsquo;t want to have to install all of them on every PC that I wanted to
edit the site from. It was possible to contain all that in a Python
virtualenv and I was using it like that for a while, but in the end it
was too much tinkering with tooling. I wanted something simpler. I
tried a few other static site generators, but in the end I ended up
with &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;. It&amp;rsquo;s just one binary, I find it much
simpler to use and it&amp;rsquo;s also really fast.&lt;/p&gt;

&lt;p&gt;So, the new blog site is built with Hugo and is hosted
at Github, using &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;. I found a
&lt;a href=&#34;https://themes.gohugo.io/hugo-theme-even/&#34;&gt;theme that I liked&lt;/a&gt;,
&lt;a href=&#34;https://github.com/gapan/hugo-theme-even&#34;&gt;tweaked it a bit&lt;/a&gt; to match Salix
aesthetics and just went with it.&lt;/p&gt;

&lt;p&gt;Github Pages was not a real option until a few months ago, when they added
support for HTTPS for all sites with a custom domain that are hosted
there. I could have always uploaded the blog at one of our servers, but
not having to maintain yet another thing is always nice. In fact, I&amp;rsquo;m
thinking of moving the main website over to Github Pages with a similar
setup. And maybe even our &lt;a href=&#34;https://docs.salixos.org/&#34;&gt;wiki&lt;/a&gt;, since
content is not really updated that often and contributors are very few.
A Hugo theme like &lt;a href=&#34;https://themes.gohugo.io/docdock/&#34;&gt;DocDock&lt;/a&gt;, or
&lt;a href=&#34;https://themes.gohugo.io/material-docs/&#34;&gt;Material Docs&lt;/a&gt; would possibly
fit fine, but it would take some effort to convert all existing content.&lt;/p&gt;

&lt;p&gt;Since Github only supports Jekyll natively for automatically building
the website, I needed to find a way to have at least a semi-automated
way to build and update the content. While there are some instructions
in Hugo&amp;rsquo;s documentation on how to do that, I wasn&amp;rsquo;t particularly happy
with any of them. So I ended up doing something a bit different. I have
everything detailed in my
&lt;a href=&#34;https://vlahavas.com/posts/20180919-hugo_with_github_pages/&#34;&gt;personal blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All in all, I like the new setup. It looks nice and it&amp;rsquo;s really simple
to create new posts using markdown.  And who knows, maybe I&amp;rsquo;ll get to
update this a bit more often than the old one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Our new extra repository</title>
      <link>https://blog.salixos.org/post/our-new-extra-repository/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/our-new-extra-repository/</guid>
      <description>&lt;p&gt;You might have noticed that just before the Salix Xfce 14.2RC1 release
a new repository, named extra-14.2 has appeared in our servers. This
has been enabled by default in the 14.2RC1 and 14.2RC2 releases and
will be also available in the final 14.2 release.&lt;/p&gt;

&lt;p&gt;This new repository is present for both i486 and x86_64 architectures
and its purpose it to include packages built from SlackBuilds found at
&lt;a href=&#34;https://slackbuilds.org/&#34;&gt;slackbuilds.org&lt;/a&gt;.
At this moment, it&amp;rsquo;s not that full, only about 20
packages are included in it. These are mostly there as proof of concept
and for initial testing. Eventually, the extra repository will be
filled with packages for almost every SlackBuild present in SBo.&lt;/p&gt;

&lt;p&gt;For the purpose of automatically building the packages, a new tool,
&lt;a href=&#34;https://github.com/gapan/sbobuild&#34;&gt;sbobuild&lt;/a&gt;,
has been developed. This takes a list of SlackBuild names as
input and continues to build the respective packages, create complete
source code trees and keep a log of every build. It&amp;rsquo;s not perfect
(yet), it was written in a hurry, but it does the job it is supposed to
do for now. Other similar tools exist, like
&lt;a href=&#34;https://github.com/idlemoor/slackrepo&#34;&gt;slackrepo&lt;/a&gt;, but they are only
meant to be used in Slackware. As such, they don&amp;rsquo;t take into account the
many packages that are already included in the Salix repositories and
may introduce conflicts. What sbobuild does, is check if any given
software available in SBo is already availabe in the Salix repositories
and if it is, it just skips it. For building and uploading the packages
that are created to our main repository, we now have a new server, which
was only made possible due to user donations.&lt;/p&gt;

&lt;p&gt;Currently, the &lt;code&gt;libraries&lt;/code&gt; directory of SBo is being processed and
packages keep coming out. As soon as this batch is finished, they will
all be uploaded to the main repository and the next batch will follow.
The &lt;code&gt;libraries&lt;/code&gt; directory alone consists of more than 800 packages and SBo
holds more than 5000 SlackBuilds. Considering that most SlackBuilds do
not take advantage of multiple processors/cores to spawn multiple build
instances, this task is going to take some time.&lt;/p&gt;

&lt;p&gt;Now, SBo has a few known shortcomings. There are some SlackBuilds that
are just unmaintained and have not been updated for a long time, in some
cases for years. Then, there are others that have broken download links
for their respective source tarballs, sometimes intermittently. And then
there are cases of conflicts and incompatibilities that sometimes are
known, but in other cases are not and nobody has noticed. Finally, there
are a few SlackBuilds that are about software that is really meant to
only be built from source. One such examples is ATLAS, which needs to be
tuned for every single CPU it runs on. Due to this nature of SBo, not
every SlackBuild is guaranteed to work and that is the reason why not
everything will be finally built. Of course we&amp;rsquo;re keeping logs with
&lt;em&gt;everything&lt;/em&gt; that fails and we will try to fix some of those builds that
failed for any reason.&lt;/p&gt;

&lt;p&gt;Additionally, SBo has a policy of constantly updating its contents with
new versions, which in my opinion is competely against Slackware&amp;rsquo;s
policy (as well as our own) for stability. For that reason, our extra
repository will remain mostly static. That means that we will not update
packages with newer versions just for the sake of having a newer
version. However if we receive reports that something is terribly broken
or severely compromised, we will definitely try to fix it. Newer
versions, as they are updated in SBo, will be available through
Sourcery/slapt-src for any users that want them, but users then will
have to take care of any conflicts that might arise.&lt;/p&gt;

&lt;p&gt;Also, the packages in the extra repository have not been thoroughly
tested, certainly not in the level that packages in the standard Salix
repositories have. Think of it as an equivalent to the &lt;em&gt;Universe&lt;/em&gt;
repository in Ubuntu, if you&amp;rsquo;re familiar with it.&lt;/p&gt;

&lt;p&gt;In some cases, mostly with Python and Perl libraries and software, not
all dependencies will be listed. If you find such a case, please notify
us (in the forums or the mailing list) and we&amp;rsquo;ll try to fix it.&lt;/p&gt;

&lt;p&gt;Since the extra repository has a lower priority in the &lt;code&gt;slapt-getrc&lt;/code&gt;
settings than the standard Salix repositories, Salix specific packages
will always override their counterparts in the extra repository and the
users will have no problem updating their systems just by using
&lt;code&gt;slapt-get&lt;/code&gt; from the command line or gslapt from the GUI.&lt;/p&gt;

&lt;p&gt;I think this is very exciting news for Salix. The new 14.2 release is
going to include more software than was ever available in the
repositories for previous releases.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Our SBo mirrors</title>
      <link>https://blog.salixos.org/post/our-sbo-mirrors/</link>
      <pubDate>Thu, 09 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/our-sbo-mirrors/</guid>
      <description>&lt;p&gt;We have been mirroring the
&lt;a href=&#34;http://slackbuilds.org/&#34;&gt;slackbuilds.org&lt;/a&gt; (SBo) repository and at the
same time applying slight changes to it for some time now. These
changes are essential to Salix, for a few reasons.&lt;/p&gt;

&lt;p&gt;First of all, the SBo maintainers have decided that they will only list
SlackBuild dependencies only if these are not part of a Slackware full
installation. While this may be a decision that is fine for Slackware
itself, since they don&amp;rsquo;t offer any kind of support for users doing
anything other than a full Slackware installation, it&amp;rsquo;s generally not
good for Salix, since a Salix installation of any edition, is slimmer
than a full Slackware installation, by far. For example, in Slackware
it is expected that everyone has the Qt libraries installed, but this
is definitely not true for Salix (except from our KDE edition of
course). So, a lot of the SlackBuilds at SBo end up having
missing dependencies when it comes to a Salix installation.&lt;/p&gt;

&lt;p&gt;Then, there is a problem with package/SlackBuild naming. We have a lot
of packages in the Salix package repositories that are also present in
the SBo repository. While we try to keep the package naming consistent
with the one they&amp;rsquo;re using in SBo, that is not always possible. For
example, at this moment, there is a package named &amp;ldquo;python-configobj&amp;rdquo; in
our package repositories and another one named &amp;ldquo;configobj&amp;rdquo; in SBo,
which are actually the exact same piece of software. Even if we made
every effort and named everything at the time of release according to
the SBo names, SBo is constantly changing and SlackBuilds may be
renamed.&lt;/p&gt;

&lt;p&gt;Another problem (for lack of a better word) is that SlackBuild
maintainers choose to update their SlackBuilds as soon as a new version
of the software they are packaging is out. While this might not be bad
in itself, it kind of conflicts with the way things work for the binary
package repositories in Slackware and also in Salix, which generally
follow the idea that upgrades should only be done for security reasons.
And since there is a very wide overlap between packages offered in the
Salix binary package repositories and the SlackBuilds provided by SBo,
there are often newer versions available in SBo than in the Salix
binary package repositories. This might confuse users, because by
opening Gslapt, they find one version and by opening Sourcery, they
find another, often newer, version. What&amp;rsquo;s more, if they were to
&amp;ldquo;upgrade&amp;rdquo; to the version available in SBo, they would find that
Gslapt/slapt-get would want to &amp;ldquo;downgrade&amp;rdquo; that package to the version
available in the Salix binary repositories and the only way to stop
that would be to put the package in the EXCLUDE list in their
slapt-getrc file.&lt;/p&gt;

&lt;p&gt;So, in Salix, we have to deal with these problems. Here&amp;rsquo;s what we do&amp;hellip;&lt;/p&gt;

&lt;p&gt;Our own copy of the SBo repository, the one that is available by
default to Salix users through our package management tools is synced
with the main SBo repository every few hours.&lt;/p&gt;

&lt;p&gt;For the first problem mentioned above, we have a mechanism for adding
&amp;ldquo;missing&amp;rdquo; dependencies in our copy of the SBo repository. For example,
the ardour SlackBuild requires cmake to build. Now, cmake is always
thought to be present in a Slackware installation, otherwise it is not
a full Slackware installation and it is not supported in any way. In
Salix though, cmake is definitely not part of a standard installation
and so we add it as an extra dependency for ardour.&lt;/p&gt;

&lt;p&gt;For the second problem, we have created a list of packages/SlackBuilds
that are named in a different way between repositories. Every
SlackBuild that is also present as a binary package in the Salix
repositories with a different name, is removed from our own copy of the
SBo repository and every reference to it in dependencies is replaced
with the name that the package has in our own binary package
repository. This way, the package in the Salix binary package
repositories is always used, even if it is originally named otherwise
in the original SBo repository.&lt;/p&gt;

&lt;p&gt;Finally, all software that is present in both the Salix binary package
repositories and SBo, is removed from our own copy of the SBo
repository, so there is no way users will be confused and go back and
forth between versions. Actually, the SlackBuilds themselves are not
removed from the repositories, rather the reference for them in the
SLACKBUILDS.TXT file is removed, so it isn&amp;rsquo;t used by our SlackBuild
management tools, slapt-src, Sourcery or spi.&lt;/p&gt;

&lt;p&gt;With SBo being a moving target though, this process will always be
ongoing and will never be 100% complete. If you find a SlackBuild that
is missing some dependency, please report it, either in our
&lt;a href=&#34;http://salixos.org/mailinglists.html&#34;&gt;mailing list&lt;/a&gt;
or in our
&lt;a href=&#34;http://forum.salixos.org/&#34;&gt;forums&lt;/a&gt;.
Similarly, if you find the same SlackBuild
present in both the Salix binary package repositories (hence available
in Gslapt) and our own copy of SBo repositories (hence
available in Sourcery), please report that too. Of course
feel free to report any other problem you might find with our
repositories.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MATE is around the corner</title>
      <link>https://blog.salixos.org/post/mate-is-around-the-corner/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/mate-is-around-the-corner/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://mate-desktop.org/&#34;&gt;MATE&lt;/a&gt;
1.8 has been released in source code form by its developers about 3
weeks ago and I have been working on packages for Salix for about as
long. The good news is that I think I&amp;rsquo;m almost done! So, expect MATE 1.8
packages to hit the repos sometime in the following days. We didn&amp;rsquo;t have
any MATE release for Salix 14.0, but it looks like we are going to have
one for 14.1!&lt;/p&gt;

&lt;p&gt;We have already included some MATE 1.6 packages in our repositories and
we have used those for our Xfce release as well, but a complete MATE 1.6
desktop was not included. The packages that we already had included were
mate-document-viewer (atril), mate-file-archiver (engrampa),
mate-dialogs and their dependencies and that&amp;rsquo;s about it. These are
also the packages that were built first for 1.8. In total there are
about 30 packages that will be pushed to the repositories, so any of
these packages that you might have on your system will be upgraded
to their 1.8 counterpart in the next days. The upgrade should be
competely harmless, so nothing to worry about. In fact I had already
patched the 1.6 packages with some fixes from the 1.8 branch, so the
most important changes were already there.&lt;/p&gt;

&lt;p&gt;I had considered using packages from the
&lt;a href=&#34;http://mateslackbuilds.github.io/&#34;&gt;MATE SlackBuilds&lt;/a&gt;
project, but
only very briefly. While the guys there have done a good work on their
packages, I realized that in most cases, we had to built our own
packages.&lt;/p&gt;

&lt;p&gt;Some of the packages from the MATE SlackBuilds project were built using
dependencies that we would never have in Salix, at least not by default.
Several packages were built with support for NetworkManager, which we do
not ship by default. There was even a case where one package was built
using GTK+ (version 1, that is ancient!) which would definitely not work
for us.&lt;/p&gt;

&lt;p&gt;One other thing that I didn&amp;rsquo;t like at all about these packages, was that
help wouldn&amp;rsquo;t work at all (used from the Help menu or using the
respective buttons in any application). It would just show an
error message, because it needs yelp. The problem is that they haven&amp;rsquo;t
included yelp and what&amp;rsquo;s worse, they have removed the actual help files
from the packages. So, even if we built a package for yelp, help would
still not work and there would still be an error message. And having an
error message pop up doing something really normal, like selecting a
menu option that is right there, everywhere, is something I don&amp;rsquo;t like
at all. Now, I also don&amp;rsquo;t care about yelp though and mostly everything
that comes from GNOME. So what I did was that I patched every single
MATE application/plugin and pointed the help menu items/buttons to the
MATE webpage. Works a lot better than any error message.&lt;/p&gt;

&lt;p&gt;And then there was the default settings issue. The packages we use,
should include default configuration that will fit with Salix,
including panel location, panel applets selection, icon theme used,
window manager theme, stuff like that. The default menus that ship
with MATE also include two separate &amp;ldquo;System&amp;rdquo; menus, one under the
&amp;ldquo;Applications&amp;rdquo; submenu and one under the &amp;ldquo;System&amp;rdquo; menu, which is
kind of confusing in my opinion. So, I edited the default menu
specifications to keep only the latter and have all &amp;ldquo;System&amp;rdquo;
applications in one place. Also, I &amp;ldquo;had&amp;rdquo; to change the default menu
icon to the Salix icon.&lt;/p&gt;

&lt;p&gt;Once again, like we did with the MATE 1.2 packages that we offered with
Salix 13.37 and the MATE 1.4 packages that we offered for Salix 14.0, we
are not building the complete set of MATE packages. We are building all
the &amp;ldquo;base&amp;rdquo; packages, that make up the actual MATE Desktop Environment,
like mate-desktop, the Caja file manager, the panel, panel applets
etc, but we are not including Pluma, the text editor, Eye of MATE,
the graphics viewer etc. This is only just because I think we
already have better alternatives for them and we wouldn&amp;rsquo;t use them
anyway. For example Geany, our default text editor/IDE that is also
part of the default Xfce release is a much better editor than Pluma
and Viewnior a better viewer than Eye of MATE.&lt;/p&gt;

&lt;p&gt;Once packages show up in the repositories, you should be able to install
the MATE desktop using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo slapt-get --install-set mate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and a beta release shouldn&amp;rsquo;t be that far off.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a screenshot in case you&amp;rsquo;re wondering what it looks like&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/mate-14.1.png&#34; alt=&#34;MATE Desktop for Salix 14.1&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Startup Guide</title>
      <link>https://blog.salixos.org/post/new-startup-guide/</link>
      <pubDate>Mon, 24 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/new-startup-guide/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve been working on this for a while and were hoping to have it ready
by the time 14.1 is released and it seems that we managed to make it!
You can now find the new guide
&lt;a href=&#34;http://salixos.org/guide.html&#34;&gt;linked from our main website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The startup guide was left with no updates since the 13.37 release, so
it was getting a bit old. It was still mostly OK, but there were things
that were out of date.&lt;/p&gt;

&lt;p&gt;Another thing that was getting in the way was the format that the guide
was written in. A tool called Publican was used to create the previous
guide, but newer versions of it seemed to only work in Debian (or was
it Fedora?). Anyway, it wouldn&amp;rsquo;t work on Salix/Slackware
anymore, so we had to switch and convert everything to the new format.
Once again, the solution was to go with
&lt;a href=&#34;http://txt2tags.org/&#34;&gt;txt2tags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, we converted everything to the txt2tags format. From the txt2tags
format, we can acquire the equivalent in html output very easily. Then,
in turn, the html output is processed through
&lt;a href=&#34;https://www.msweet.org/projects.php?Z1&#34;&gt;htmldoc&lt;/a&gt;
to split it in
multiple pages and create a table of contents and a lot of sed magic is
used to apply css formatting to the output so it looks nice.&lt;/p&gt;

&lt;p&gt;The upside of using txt2tags is that it&amp;rsquo;s not only html output that it
can produce. Using the same source file, tex files can be created.
These can be processed throught TexLive to create a pdf file. And since
this is LaTeX we&amp;rsquo;re talking about the result looks absolutely
professional. Still, some sed magic was needed here too, in order to
make fine changes, but after initial setup, pdf generation is
completely automated.&lt;/p&gt;

&lt;p&gt;Producing ebooks is the next step. Creating epub and mobi files from
the html output is almost ready and these will also be available for
download soon. So, you could read the Salix Startup Guide in your
favourite ebook reader.&lt;/p&gt;

&lt;p&gt;The only downside of using txt2tags like that, is that currently there
is no provision for translations. There is simply no way to do it in a
sane way. Truth is that translators put a lot of work in the previous
versions of the guide, but it seems that we won&amp;rsquo;t be able to provide
localized versions of the guide anymore.&lt;/p&gt;

&lt;p&gt;The guide may not be 100% ready yet, there might still be small issues
that need taking care of, but we think that it&amp;rsquo;s ready for public
release as it is. If you find anything that you may think needs fixing,
please contact us through our
&lt;a href=&#34;http://salixos.org/mailinglists.html&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kernel decisions</title>
      <link>https://blog.salixos.org/post/kernel-decisions/</link>
      <pubDate>Tue, 14 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/kernel-decisions/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve had a few chats lately, either through email, in our forums and in
IRC about the kernels that we&amp;rsquo;re including with our 32-bit releases and
I thought it would be best if I explained things a bit.&lt;/p&gt;

&lt;p&gt;First of all, 32-bit Slackware ships with two different kernels. The
first one, which is the most used of the two is an i686 optimized,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Physical_Address_Extension&#34;&gt;PAE&lt;/a&gt;
enabled,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Symmetric_multiprocessor_system&#34;&gt;SMP&lt;/a&gt;
capable kernel. The second one is an i486 optimized,
non-PAE, non-SMP capable kernel. The options with which these kernels
have been built is a decision made by Slackware and it is our policy
that we don&amp;rsquo;t change major things like that.&lt;/p&gt;

&lt;p&gt;While all previous 32-bit Salix releases included both kernels, since
the Salix Xfce 14.0 release, we do not ship the i486 kernel anymore for
our &amp;ldquo;big desktop&amp;rdquo; releases. That includes all Xfce, KDE and MATE
releases (we skipped the last one for 14.0, but that&amp;rsquo;s another
subject). And that&amp;rsquo;s the same thing that we&amp;rsquo;re going to do for
our 14.1 releases.&lt;/p&gt;

&lt;p&gt;The reason for this is a simple one: size. The nature of software is to
grow and while the iso images for our first Salix Xfce 13.0 releases
was no more than 550MB, since 14.0, we are struggling to keep the size
within 700MB. And that&amp;rsquo;s with keeping the software that is installed by
default the same, more or less. The 700MB limit is a very important
one, because it means that the iso image can be burned to a CD-ROM
disc. If we exceed that limit, there are mainly two options, either
burn and use a DVD-ROM or transfer the image to a USB flash drive and
install using that.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m only referring to our 32-bit releases, since anyone with a 64-bit
capable PC probably has a DVD-ROM drive anyway and certainly can boot
using a flash drive. So, I don&amp;rsquo;t really care much if we exceed the
limit in our 64-bit releases. But a big portion of older PCs do not
support booting from USB and several of them do not have a DVD-ROM
drive and our 32-bit releases need to cover for those.&lt;/p&gt;

&lt;p&gt;Right now, the latest Salix Xfce 14.1beta1 32-bit iso image is exactly
702MB. That still fits into a CD-ROM disc, the actual limit being a bit
higher than that. But it only includes the i686 kernel. If we were to
add the i486 kernel as well, that would mean that the iso size would
increase by at least another 50MB. And that would definitely put it
over the CD-ROM size limit (yes, I know that 800MB CD-ROM discs exist,
but they were never that popular, mainly because there were
never reliable).&lt;/p&gt;

&lt;p&gt;So, we had to make a choice. Either we include the i486 kernel too and
require a DVD-ROM to burn and install the iso, or ditch it and keep it
within the CD-ROM size limit. We went with the latter.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s see which CPUs we are excluding exactly with that choice,
because there is a lot of misunderstanding going on about that.&lt;/p&gt;

&lt;p&gt;A lot of people seem to think that since the i686 kernel is an SMP
capable kernel, that immediately excludes all single core CPUs for some
reason. But SMP capable just means that the kernel can support multiple
cores (or motherboards with multiple CPUs) if it happens to find them
and there is no problem at all running such a kernel with a single core
CPU.&lt;/p&gt;

&lt;p&gt;Then of course there is the issue that the kernel is built for i686.
All CPUs that were manufactured after and including the Pentium Pro
though, support the i686 instruction set. And Pentium Pro was
introduced in 1995. The only CPUs that are actually excluded by the
architecture choice are Pentium 1 chips (max 200MHz), i486 chips and
compatibles (AMD and Cyrix equivalents) from that era.&lt;/p&gt;

&lt;p&gt;The most important issue is actually that the i686 kernel is built with
PAE support. Unfortunately that excludes all CPUs that do not support
PAE. But still, every CPU that has been manufactured after and
including the Pentium Pro supports PAE! The only exception being some
Pentium M CPUs, but still not all of those, only the ones with a 400MHz
bus, which were marketed using the term &amp;ldquo;Centrino&amp;rdquo;. By the way, the
Pentium M is a CPU that came out in 2003.&lt;/p&gt;

&lt;p&gt;So there you have it. The PCs that can&amp;rsquo;t be used to install Salix Xfce,
KDE or MATE to, are ones that have an i486, a Pentium 1 or a specific
kind of Pentium M CPU, with the only really loss being those few
Pentium M PCs. I don&amp;rsquo;t think anyone in their right minds would want to
use Xfce or KDE or MATE on an i486 or Pentium 1 PC. And really, nobody
would probably want to use KDE on a Pentium M PC either. Xfce and MATE
might work modestly, but for that CPU, faster and more spartan
alternatives exist.&lt;/p&gt;

&lt;p&gt;If we had made a different choice and kept the i486 kernel, sure we
would be also covering all PCs with those CPUs as well. But then we
would be excluding most of them all over again, requiring a DVD-ROM
drive. And in the process we would be excluding all PCs that have a
better CPU but only a CD-ROM drive instead of a DVD-ROM drive and also
the people that have a bunch of CD-writable media they would want to
use. I&amp;rsquo;m fairly certain that this is a much more significant number of
people.&lt;/p&gt;

&lt;p&gt;However, all is not lost even for those with those very old CPUs. As we
did with our Salix Ratpoison 14.0, release, all our &amp;ldquo;lighter desktop&amp;rdquo;
releases will also include the i486 kernel. That will certainly include
a Ratpoison release and maybe we&amp;rsquo;ll come back to a Fluxbox or LXDE
release and I know someone is considering an Openbox release. We might
even have a core-only iso, we&amp;rsquo;ll see. These will include both i486 and
i686 kernels simply because even if they do, the iso size stays well
within the 700MB limit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The gksu problem</title>
      <link>https://blog.salixos.org/post/the-gksu-problem/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/the-gksu-problem/</guid>
      <description>&lt;p&gt;We had a real problem with ktsuss/gksu while developing for 14.1. It
seems that newer versions of the shadow package, and certainly the one
that is included in Slackware 14.1, don&amp;rsquo;t allow su to be executed in any
other way except directly from a terminal. That means that su cannot be
executed as a subprocess from inside ktsuss or the original gksu anymore
and these become effectively useless. This is a critical issue for us,
because if we don&amp;rsquo;t fix it, almost nothing in the System part of the
menu would actually work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://live.gnome.org/gksu&#34;&gt;gksu-polkit&lt;/a&gt;
works around this problem by using policykit for getting
superuser proviliges, but it doesn&amp;rsquo;t seem to be developed and it has
terrible bugs that cause the CPU to hit 100% and stay there. It
would fry your PC.&lt;/p&gt;

&lt;p&gt;So, one solution, was to patch ktsuss to actually open a terminal
and execute su from inside a terminal. But that would mean a
terminal popping on the screen and staying there for the duration
that you had the application that you launched open. And if you
actually closed the terminal, the app would close too. Ugly.&lt;/p&gt;

&lt;p&gt;The other solution would be to stick with the shadow version that
came with 14.0. ktsuss works fine with that. But we can&amp;rsquo;t rely on
older versions of software like that. We can&amp;rsquo;t keep the old version
forever and this was no real solution.&lt;/p&gt;

&lt;p&gt;So, in the absense of anything else out there that fixes this
problem, there was nothing else left but writing my own. Enter &lt;em&gt;gnsu&lt;/em&gt;
(Gnsu&amp;rsquo;s Not SU). It&amp;rsquo;s actually a couple of rather simple shell
scripts that use &lt;a href=&#34;https://code.google.com/p/yad/&#34;&gt;yad&lt;/a&gt;
to display a window requesting the &lt;em&gt;user&lt;/em&gt;
password to get superuser rights using sudo as a backend.&lt;/p&gt;

&lt;p&gt;That means that you don&amp;rsquo;t have to provide (or know) the &lt;em&gt;root&lt;/em&gt; user
password to launch an app with superuser priviliges. But you need to
be included in the sudoers list. So you would have to run &lt;code&gt;visudo&lt;/code&gt;
from a root terminal and add something like the following somewhere
in the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;george ALL=(ALL) ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to allow user &lt;em&gt;george&lt;/em&gt; to run apps with superuser priviliges, or
something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%users ALL=(ALL) ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to allow anyone in the &lt;em&gt;users&lt;/em&gt; group to do the same.&lt;/p&gt;

&lt;p&gt;I chose yad for displaying the password request window, for
the reason that it has more features than other similar apps
out there and would allow me to make the window a bit more
beatiful, by displaying an icon in it. It would be trivial
to patch gnsu to use zenity, matedialogs, xdialog or any
other similar app out there.&lt;/p&gt;

&lt;p&gt;The code for gnsu is up on &lt;a href=&#34;https://github.com/gapan/gnsu&#34;&gt;github&lt;/a&gt;.
It&amp;rsquo;s in early stages, but
it works. I still want to add some things, like support for
translations and a Makefile, but these can come later. Oh, I
could use the strings from our
&lt;a href=&#34;https://www.transifex.com/projects/p/salix/resource/ktsuss-l10n/&#34;&gt;ktssuss translation project&lt;/a&gt;,
so it would be already translated.&lt;/p&gt;

&lt;p&gt;Now, just symlink gnsu to gksu (not necessary if you install
the gnsu package) and everything should work.&lt;/p&gt;

&lt;p&gt;There is an added benefit by using sudo as the backend; if
you launch something with gnsu from a terminal and then
launch something else with gnsu again from the same terminal
in a short time after the first one, you don&amp;rsquo;t get a
password request the second time (or third, or forth&amp;hellip;).
This behaviour can be tweaked by editing sudo settings.&lt;/p&gt;

&lt;p&gt;Can&amp;rsquo;t get any more simple than that.&lt;/p&gt;

&lt;p&gt;Plus, I always wanted to name something with a recursive
acronym. :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How much of Slackware is in Salix</title>
      <link>https://blog.salixos.org/post/how-much-of-slackware-is-in-salix/</link>
      <pubDate>Wed, 30 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/how-much-of-slackware-is-in-salix/</guid>
      <description>

&lt;p&gt;That is a question that I had in my mind for a while. At some point I had also
done the actual counting, so I had an idea, but I never wrote anything down.&lt;/p&gt;

&lt;p&gt;There are many people that believe that a derivative distribution only just
leeches their parent distribution, maybe changing the default wallpaper or a
couple of settings here and there and making a release. I know for a fact that
some people that have never tried Salix (or have tried Salix but never
Slackware itself) even think the same for Salix. I don&amp;rsquo;t doubt that there are a
lot of derivative distributions that are like that, but well&amp;hellip; Salix is
definitely not like that.&lt;/p&gt;

&lt;p&gt;The numbers that are shown here are for Slackware/Salix 14 .0 and the 32-bit
repositories. For previous, or more recent releases (when they will be
released) the numbers would probably be very similar. The 64-bit repositories
should be the same as the 32-bit repositories (give or take a package). These
numbers may also change a little in the course of each release&amp;rsquo;s lifetime as
security related packages are added to the patches directories etc, but only
just a little.&lt;/p&gt;

&lt;h2 id=&#34;repositories&#34;&gt;Repositories&lt;/h2&gt;

&lt;p&gt;First of all, all of Slackware is in Salix. What I mean by that, is that every
package that is included in the Slackware repositories, is available in Salix
through the package manager (GSlapt from the GUI or slapt-get from the command
line). There are
&lt;a href=&#34;http://docs.salixos.org/wiki/Packages,_that_are_different_from_Slackware&#34;&gt;a few exceptions&lt;/a&gt;,
where we substitute Slackware packages for
Salix-specific package, for several reasons that are very important to us, but
that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;So, in terms of available pre-packaged software that you can find through the
package manager in Salix, there is a total of 2145 packages. Of that, 1151
(53.7%) are original Slackware packages. The rest (994, 46.3%) are packages
that were build for Salix and that you cannot find in Slackware repositories.
Of course, Slackware users can install any of those packages if they like as
every package is 100% compatible to Slackware. So, Salix almost doubles the
amount of ready made software that a Slackware user can install.&lt;/p&gt;

&lt;h2 id=&#34;releases&#34;&gt;Releases&lt;/h2&gt;

&lt;p&gt;So, what happens with Salix releases and the system that you get right after a
fresh installation? The answer here varies, as Salix has several releases,
based on different Desktop Environments and there are also different
installation modes for each of those releases, Core, Basic and Full,
respectively.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll take a look at our Xfce, KDE and our soon-to-be-released Ratpoison
editions for version 14.0.&lt;/p&gt;

&lt;p&gt;Keep in mind that the numbers listed below are what happens right after a fresh
installation. If people install the multimedia codecs using our
salix-codecs-installer tool (and most people would), the number of Salix
packages would increase by about 50.&lt;/p&gt;

&lt;h3 id=&#34;core-installation&#34;&gt;Core Installation&lt;/h3&gt;

&lt;p&gt;A Salix Core installation is exactly the same, no matter what iso image you
used to make the installation.&lt;/p&gt;

&lt;p&gt;After a Core mode installation, you get a total of 250 installed packages. Of
those packages, the vast majority (233, 93.2%) are Slackware packages. The rest
(17, 6.8%) are Salix-specific packages. The Salix packages are mainly the
package manager, the Salix command line system tools and their dependencies and
nothing more.&lt;/p&gt;

&lt;p&gt;So, what you get with a Salix Core installation, is mainly a Slackware system
that only works from the command line and only very few added packages by
Salix. It&amp;rsquo;s funny, because there are a lot of Slackware users that apparently
look for a stripped down Slackware installation with no GUI, but never look at
Salix.&lt;/p&gt;

&lt;h3 id=&#34;xfce-basic-installation&#34;&gt;Xfce Basic Installation&lt;/h3&gt;

&lt;p&gt;OK, so what happens once we start adding a GUI and all related packages. A
Salix Basic installation adds only the Desktop Environment and very few
graphical applications on top of it, like a browser, a graphical package
manager and the Salix GUI system tools.&lt;/p&gt;

&lt;p&gt;After an Xfce Basic installation, you get a total of 579 packages (including
all the packages in the Core installation). 532 of those packages (91.9%) are
pure Slackware packages. Still, only 47 (8.1%) are Salix specific packages. The
number of Salix specific packages might still be small, but these few packages
this time make a difference; among these packages there are packages that add
important functionality, like the Salix GUI system tools or a login manager
etc.&lt;/p&gt;

&lt;h3 id=&#34;xfce-full-installation&#34;&gt;Xfce Full Installation&lt;/h3&gt;

&lt;p&gt;An Xfce Full installation is what most people would use though.&lt;/p&gt;

&lt;p&gt;A total of 761 packages are installed (including all packages in the Core and
Basic installations). Of those packages, 611 (80.3%) are Slackware packages and
150 (19.7%) are Salix packages. So, the Salix part becomes really significant
here and among the Salix packages are some that are considered really important
for a desktop distribution, like the LibreOffice suite, the media players,
document/image viewers etc.&lt;/p&gt;

&lt;h3 id=&#34;kde-basic-installation&#34;&gt;KDE Basic Installation&lt;/h3&gt;

&lt;p&gt;After a KDE Basic installation, you get a total of 626 packages installed. The
number of Slackware packages is 580 (92.7%) and the number of Salix packages is
46 (7.3%). The numbers are similar to the Xfce Basic installation.&lt;/p&gt;

&lt;h3 id=&#34;kde-full-installation&#34;&gt;KDE Full Installation&lt;/h3&gt;

&lt;p&gt;A KDE Full installation includes a total of 760 packages. Of those, 661 (87.0%)
are Slackware packages and 99 (13.0%) are Salix packages. The numbers are
similar to the Xfce Full installation, only slightly skewed to the Slackware
side, as KDE is a major part and the default DE for Slackware and a lot of
KDE-related software is part of Slackware anyway.&lt;/p&gt;

&lt;h3 id=&#34;ratpoison-basic-installation&#34;&gt;Ratpoison Basic Installation&lt;/h3&gt;

&lt;p&gt;In a Ratpoison Basic installation, there is a total of 561 packages. Of those,
514 (91.6%) are Slackware packages and 47 (8.4%) are Salix packages. So,
numbers are similar across all Basic installations.&lt;/p&gt;

&lt;h3 id=&#34;ratpoison-full-installation&#34;&gt;Ratpoison Full Installation&lt;/h3&gt;

&lt;p&gt;A total of 672 packages are installed in a Ratpoison Full installation. The
number of Slackware packages is 575 (85.6%) and the number of Salix packages is
97 (14.4%). The numbers are somewhere in between the Xfce and KDE Full
installations.&lt;/p&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Here is a table that sums up all the numbers mentioned above:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Total&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Slackware&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Salix&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Repositories&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2145&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1151 (53.7%)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;994 (46.3%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Core&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;250&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;233 (93.2%)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;17 (6.8%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Xfce Basic&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;579&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;532 (91.9%)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;47 (8.1%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Xfce Full&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;761&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;611 (80.3%)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;150 (19.7%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;KDE Basic&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;626&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;580 (92.7%)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;46 (7.3%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;KDE Full&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;760&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;61 (87.0%)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;99 (13.0%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ratpoison Basic&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;561&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;514 (91.6%)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;47 (8.4%)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ratpoison Full&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;672&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;575 (85.6%)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;97 (14.4%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is obvious that the contribution of Salix to the Slackware ecosystem is
significant. With Salix almost doubling the amount of packages that Slackware
offers, it is the largest third-part package repository for Slackware out
there. What&amp;rsquo;s most important is that these packages are of very high quality,
tested and guaranteed to work in a pure Slackware installation.&lt;/p&gt;

&lt;p&gt;Moreover, the part that Slackware plays in every Salix release is apparent.
What you get after a Salix installation, is really a stripped Slackware system,
that includes all the extra parts that Salix provides to make it really usable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Website Design</title>
      <link>https://blog.salixos.org/post/new-website-design/</link>
      <pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.salixos.org/post/new-website-design/</guid>
      <description>&lt;p&gt;As many might have noticed, we now have a new main website design!&lt;/p&gt;

&lt;p&gt;Since the Salix project was started, the main website was actually a
part of our wiki, which is using the MediaWiki engine. That had one main
advantage, which at that time seemed enough to justify that choice; we
would use a single CMS to manage both our wiki and our main page. So, we
created a custom MediaWiki theme that would look good as a main project
page and as a wiki. And admittedly, that worked fine for several years!&lt;/p&gt;

&lt;p&gt;During the last months though, disadvantages started to become obvious.
What happened first was that the latest updates to the MediaWiki
software broke our custom theme. So, that meant that we should either
fix that custom theme (which mostly meant writing it from scratch again)
or separate the main page from the wiki and use the wiki with a
standard MediaWiki theme. We went for the latter option as that was
considerably less work! So, the wiki would look more like any other
MediaWiki based wiki out there, but we were free to upgrade it to
newer versions, covering security issues without thinking of what it
will do to our main webpage.&lt;/p&gt;

&lt;p&gt;That left us hunting for a system to manage our main page. The first
option we tried was &lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;Pelican&lt;/a&gt;.
It really looked like a good choice.
The content was written in simple markdown and then using Pelican we
would take that markdown and transform it into a full website that
Pelican could also upload and sync to the main server. And what
Pelican created was simple HTML content. No database was needed to
run in the background and there was no PHP content anywhere. Nice
and simple. The fact that the content was plain HTML, would mean
that the website would be less prone to attacks. Also, the fact that
&lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;kernel.org&lt;/a&gt;
also used Pelican for managing their website was very
reassuring too. So, we took the Pelican theme that kernel.org was
using, tweaked it a bit and that looked good and very close to what
we wanted!&lt;/p&gt;

&lt;p&gt;The advantages of using such a system became apparent shortly after
we switched. Unfortunately, we had hardware troubles with the server
that hosted our main page, our wiki and our forums. The MySQL
databases that the wiki and forum were using would become corrupted
and the wiki and forums would stop working. It took us a while to
realize that this was actually caused by a hardware problem. We
first thought that it was a hard drive in the RAID array failing,
but all hard drives passed any tests without problems. Then, since
we were getting filesystem errors constantly, we thought that it may
be the hard drive controller card, but that looked OK too. It turned
out that the mainboard was faulty, so after a mainboard replacement,
everything was back to normal again. But during all that time, the
wiki and forum was mostly down, but at least our main page was
working! The fact that it was only static HTML pages and it didn&amp;rsquo;t
need a database or any code for that matter running on the server
made it work with no problems with even such severe hardware errors!&lt;/p&gt;

&lt;p&gt;So, Pelican looked indeed like a very nice choice! And it worked
nicely as our main page for a month or so. Serving static content is
also a lot faster than serving a complex CMS, the main page would
load a lot faster than before. But then trouble started again. I
wanted to update some content on the main page. For generating the
main page, we had originally used Pelican 3.0 and that was what I
had installed on my laptop which I had used then. Unfortunately, I
had forgotten that laptop at my parents house after a weekend visit
and wasn&amp;rsquo;t going to get it back for at least another couple of
weeks. So, I went ahead and installed Pelican 3.3 at the laptop I
actually had with me, which was now the latest version (and the one
that was easier to install using pip). And then realized
that everything was broken. The upgrade from Pelican 3.0 to 3.3,
meant that the theme that we were using needed a major restructuring
(possibly a complete rewrite) because it wouldn&amp;rsquo;t work at all any
more. So, we either had to do that, or switch to something
different, once again. During all that time, it also became apparent
that Pelican was mostly suited to writing blogs, instead of mostly
static content which is what we wanted. It could create static
content, but it&amp;rsquo;s main thing is really blogs&amp;hellip;&lt;/p&gt;

&lt;p&gt;It was then that I remembered that I was already using a tool that
could create simple, static HTML content using simple markdown. I
was already using &lt;a href=&#34;http://txt2tags.org/&#34;&gt;txt2tags&lt;/a&gt; to create man pages for all the system
tools that you can use in Salix, but it can also create HTML pages
too (among over a dozen other different output formats). So, maybe
it was simpler to switch to txt2tags. And it was! txt2tags can be
used to create simple HTML pages and those pages can look like
anything you like, using CSS! That is an even simpler system than
Pelican and closer to what we were looking for in the first place.
The txt2tags website itself is written in txt2tags as are a number
of other different websites which you can find on the txt2tags
website. I liked the looks of the txt2tags website so much that I
used exactly the same CSS, with only minor changes. So, that is why
both pages look very similar.&lt;/p&gt;

&lt;p&gt;In the spirit of Pelican, I created a simple Makefile that would
help with generating the static HTML content and also with updating
the main webpage with it. Everything is online in my
&lt;a href=&#34;https://github.com/gapan/www.salixos.org&#34;&gt;github repo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If in the future we decide to switch to a different look, it&amp;rsquo;s just
as simple as using a different CSS. Since the txt2tags syntax is
highly unlikely to change, our main page is now beautiful, fast,
more secure and future-proof!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to thank Thorsten for all his work with our wiki, forum and
Pelican website. I&amp;rsquo;m mostly ignorant of how it all works&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
